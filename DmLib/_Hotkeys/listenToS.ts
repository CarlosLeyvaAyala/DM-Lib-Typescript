import { Input, once } from "skyrimPlatform"
import { doNothing } from "./doNothing"
import { doNothingOnHold } from "./doNothingOnHold"
import {
  Modifiers,
  ListeningFunction,
  DxScanCode,
  KeyPressEvt,
  KeyHoldEvt,
} from "./types"
import {
  isShiftPressed,
  isAltPressed,
  isCtrlPressed,
} from "./isModifierPressed"

/** "ListenTo - Simple". Listens for some Hotkey press / release / hold.
 *
 * @see {@link https://www.creationkit.com/index.php?title=Input_Script#DXScanCodes | DXScanCodes}
 * for possible hotkey values.
 *
 * @remarks
 * Use functions generated by this function ***only inside an `'update'` event***.
 * But ***DON'T GENERATE functions INSIDE an `'update'` event***.
 *
 * This function is intended to be used for quick prototyping.\
 * For "production" code, use {@link listenTo}.
 *
 * @param hk The hotkey to listen for.
 * @param enable If `false`, a blank function will be returned.\
 * Use this argument when you need to listen to hotkeys only when you know some condition
 * will be true. This will avoid wasting time doing checks that will never come true.
 *
 * @returns A function that accepts three callbacks:
 * 1. OnKeyPress
 * 1. OnKeyReleased
 * 1. OnKeyHold - This one gets how many frames has the key being held
 *
 * @example
 * const LogPress = () => { printConsole(`Key was pressed`) }
 *
 * const LogRelease = () => { printConsole(`Key was released`) }
 *
 * const LogHold: KeyHoldEvt = n => () => { printConsole(`Key has been held for ${n} frames.`) }
 *
 * const DoStuff = ListenTo(76)           // Listen to num5
 * const OnlyCareForHold = ListenTo(77)   // Listen to num6
 *
 * const specialModeEnabled = settings["mod"]["specialMode"]
 * const SpecialOperation = ListenTo(DxScanCode.F10, specialModeEnabled)
 *
 * on('update', () => {
 *   DoStuff(LogPress, LogRelease, LogHold)
 *   OnlyCareForHold(undefined, undefined, LogHold)
 *
 *   SpecialOperation(LogPress)
 *
 *   // Never generate functions inside an update event.
 *   // The following code won't work.
 *   const NonWorking = ListenTo(78)
 *   NonWorking(LogPress, undefined, LogHold)
 * })
 */
export function listenToS(
  hk: number,
  enable: boolean = true,
  modifiers?: Modifiers
): ListeningFunction {
  let old = false
  let frames = 0

  return enable && hk > DxScanCode.None
    ? (
        OnPress: KeyPressEvt = doNothing,
        OnRelease: KeyPressEvt = doNothing,
        OnHold: KeyHoldEvt = doNothingOnHold
      ) => {
        if (modifiers && !Continue(modifiers)) return
        const p = Input.isKeyPressed(hk)

        if (old !== p) {
          frames = 0
          if (p) once("update", OnPress)
          else once("update", OnRelease)
        } else if (p) {
          frames++
          once("update", OnHold(frames))
        }

        old = p
      }
    : (
        OnPress: KeyPressEvt = doNothing,
        OnRelease: KeyPressEvt = doNothing,
        OnHold: KeyHoldEvt = doNothingOnHold
      ) => {}
}
/** Checks for modifiers.
 * Made like this for optimization purposes.
 */

export function Continue(m: Modifiers) {
  const TC = () => T(m.ctrl, C, () => true)
  const TAC = () => T(m.alt, A, TC)
  const TSAC = () => T(m.shift, S, TAC)
  return TSAC()
}
type TF = () => boolean
const S = isShiftPressed
const A = isAltPressed
const C = isCtrlPressed
const T = (k: boolean | undefined, P: TF, f: TF) => {
  const p = P()
  if (k) {
    if (!p) return false // Key isn't pressed, but should
    return f() // Check if next sequence is pressed
  } else {
    if (p) return false // Key is pressed, but shouldn't
    return f() // Check if next sequence is pressed
  }
}
